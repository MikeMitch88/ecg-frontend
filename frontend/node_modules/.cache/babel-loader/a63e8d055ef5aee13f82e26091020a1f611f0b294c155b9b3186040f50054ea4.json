{"ast":null,"code":"var _jsxFileName = \"/workspaces/ecg-frontend/frontend/src/components/ECGChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst ECGChart = ({\n  data,\n  height = 300,\n  showGrid = true,\n  showPoints = false,\n  color = '#3b82f6'\n}) => {\n  _s();\n  const chartRef = useRef(null);\n\n  // Generate sample ECG data if no data provided\n  const generateSampleECG = () => {\n    const points = 1000;\n    const time = Array.from({\n      length: points\n    }, (_, i) => i / 100); // 10 seconds at 100Hz\n    const signal = [];\n    for (let i = 0; i < points; i++) {\n      const t = time[i];\n      // Generate ECG-like signal with R-peaks every ~0.8 seconds\n      const heartRate = 75; // BPM\n      const rrInterval = 60 / heartRate;\n      const rPeak = Math.sin(2 * Math.PI * t / rrInterval) * Math.exp(-Math.pow((t % rrInterval - rrInterval / 2) / 0.1, 2));\n      const noise = (Math.random() - 0.5) * 0.1;\n      signal.push(rPeak + noise);\n    }\n    return {\n      time,\n      signal\n    };\n  };\n\n  // Use provided data or generate sample data\n  const {\n    time,\n    signal\n  } = data ? {\n    time: Array.from({\n      length: data.length\n    }, (_, i) => i),\n    signal: data\n  } : generateSampleECG();\n  const chartData = {\n    labels: time,\n    datasets: [{\n      label: 'ECG Signal',\n      data: signal,\n      borderColor: color,\n      backgroundColor: `${color}20`,\n      borderWidth: 2,\n      pointRadius: showPoints ? 1 : 0,\n      pointHoverRadius: 3,\n      fill: true,\n      tension: 0.1\n    }]\n  };\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n          label: context => {\n            return `Amplitude: ${context.parsed.y.toFixed(3)}`;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Time (s)',\n          color: '#6b7280'\n        },\n        grid: {\n          display: showGrid,\n          color: '#e5e7eb'\n        },\n        ticks: {\n          color: '#6b7280'\n        }\n      },\n      y: {\n        display: true,\n        title: {\n          display: true,\n          text: 'Amplitude (mV)',\n          color: '#6b7280'\n        },\n        grid: {\n          display: showGrid,\n          color: '#e5e7eb'\n        },\n        ticks: {\n          color: '#6b7280'\n        }\n      }\n    },\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false\n    },\n    elements: {\n      point: {\n        radius: showPoints ? 1 : 0,\n        hoverRadius: 3\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full\",\n    style: {\n      height: `${height}px`\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(ECGChart, \"aW/6lq35noP8VJrK3G9P8gm4OYM=\");\n_c = ECGChart;\nexport default ECGChart;\nvar _c;\n$RefreshReg$(_c, \"ECGChart\");","map":{"version":3,"names":["React","useRef","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","ECGChart","data","height","showGrid","showPoints","color","_s","chartRef","generateSampleECG","points","time","Array","from","length","_","i","signal","t","heartRate","rrInterval","rPeak","Math","sin","PI","exp","pow","noise","random","push","chartData","labels","datasets","label","borderColor","backgroundColor","borderWidth","pointRadius","pointHoverRadius","fill","tension","options","responsive","maintainAspectRatio","plugins","legend","display","tooltip","mode","intersect","callbacks","context","parsed","y","toFixed","scales","x","title","text","grid","ticks","interaction","axis","elements","point","radius","hoverRadius","className","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/ecg-frontend/frontend/src/components/ECGChart.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n} from 'chart.js';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\ninterface ECGChartProps {\r\n  data?: number[];\r\n  height?: number;\r\n  showGrid?: boolean;\r\n  showPoints?: boolean;\r\n  color?: string;\r\n}\r\n\r\nconst ECGChart: React.FC<ECGChartProps> = ({\r\n  data,\r\n  height = 300,\r\n  showGrid = true,\r\n  showPoints = false,\r\n  color = '#3b82f6'\r\n}) => {\r\n  const chartRef = useRef<ChartJS<'line'>>(null);\r\n\r\n  // Generate sample ECG data if no data provided\r\n  const generateSampleECG = () => {\r\n    const points = 1000;\r\n    const time = Array.from({ length: points }, (_, i) => i / 100); // 10 seconds at 100Hz\r\n    const signal = [];\r\n    \r\n    for (let i = 0; i < points; i++) {\r\n      const t = time[i];\r\n      // Generate ECG-like signal with R-peaks every ~0.8 seconds\r\n      const heartRate = 75; // BPM\r\n      const rrInterval = 60 / heartRate;\r\n      const rPeak = Math.sin(2 * Math.PI * t / rrInterval) * Math.exp(-Math.pow((t % rrInterval - rrInterval/2) / 0.1, 2));\r\n      const noise = (Math.random() - 0.5) * 0.1;\r\n      signal.push(rPeak + noise);\r\n    }\r\n    \r\n    return { time, signal };\r\n  };\r\n\r\n  // Use provided data or generate sample data\r\n  const { time, signal } = data ? \r\n    { time: Array.from({ length: data.length }, (_, i) => i), signal: data } : \r\n    generateSampleECG();\r\n\r\n  const chartData = {\r\n    labels: time,\r\n    datasets: [\r\n      {\r\n        label: 'ECG Signal',\r\n        data: signal,\r\n        borderColor: color,\r\n        backgroundColor: `${color}20`,\r\n        borderWidth: 2,\r\n        pointRadius: showPoints ? 1 : 0,\r\n        pointHoverRadius: 3,\r\n        fill: true,\r\n        tension: 0.1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n      tooltip: {\r\n        mode: 'index' as const,\r\n        intersect: false,\r\n        callbacks: {\r\n          label: (context: any) => {\r\n            return `Amplitude: ${context.parsed.y.toFixed(3)}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Time (s)',\r\n          color: '#6b7280',\r\n        },\r\n        grid: {\r\n          display: showGrid,\r\n          color: '#e5e7eb',\r\n        },\r\n        ticks: {\r\n          color: '#6b7280',\r\n        },\r\n      },\r\n      y: {\r\n        display: true,\r\n        title: {\r\n          display: true,\r\n          text: 'Amplitude (mV)',\r\n          color: '#6b7280',\r\n        },\r\n        grid: {\r\n          display: showGrid,\r\n          color: '#e5e7eb',\r\n        },\r\n        ticks: {\r\n          color: '#6b7280',\r\n        },\r\n      },\r\n    },\r\n    interaction: {\r\n      mode: 'nearest' as const,\r\n      axis: 'x' as const,\r\n      intersect: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: showPoints ? 1 : 0,\r\n        hoverRadius: 3,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\" style={{ height: `${height}px` }}>\r\n      <Line ref={chartRef} data={chartData} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ECGChart;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}