{"ast":null,"code":"var _jsxFileName = \"/workspaces/ecg-frontend/frontend/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user && !!token;\n  useEffect(() => {\n    // Check for stored token on app load\n    const storedToken = localStorage.getItem('ecg_token');\n    if (storedToken) {\n      setToken(storedToken);\n      // Verify token and get user info\n      verifyToken(storedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n  const verifyToken = async token => {\n    try {\n      const userData = await authService.getCurrentUser(token);\n      setUser(userData);\n    } catch (error) {\n      // Token is invalid, clear it\n      localStorage.removeItem('ecg_token');\n      setToken(null);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setIsLoading(true);\n      const response = await authService.login(email, password);\n      const {\n        access_token\n      } = response;\n      setToken(access_token);\n      localStorage.setItem('ecg_token', access_token);\n\n      // Get user info\n      const userData = await authService.getCurrentUser(access_token);\n      setUser(userData);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async (email, password, fullName) => {\n    try {\n      setIsLoading(true);\n      const response = await authService.register(email, password, fullName);\n      setUser(response);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('ecg_token');\n  };\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    isLoading,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isLoading","setIsLoading","isAuthenticated","storedToken","localStorage","getItem","verifyToken","userData","getCurrentUser","error","removeItem","login","email","password","response","access_token","setItem","register","fullName","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/workspaces/ecg-frontend/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { authService } from '../services/api';\r\n\r\ninterface User {\r\n  id: number;\r\n  email: string;\r\n  full_name?: string;\r\n  is_active: boolean;\r\n  is_verified: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, password: string, fullName?: string) => Promise<void>;\r\n  logout: () => void;\r\n  isLoading: boolean;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const isAuthenticated = !!user && !!token;\r\n\r\n  useEffect(() => {\r\n    // Check for stored token on app load\r\n    const storedToken = localStorage.getItem('ecg_token');\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n      // Verify token and get user info\r\n      verifyToken(storedToken);\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const verifyToken = async (token: string) => {\r\n    try {\r\n      const userData = await authService.getCurrentUser(token);\r\n      setUser(userData);\r\n    } catch (error) {\r\n      // Token is invalid, clear it\r\n      localStorage.removeItem('ecg_token');\r\n      setToken(null);\r\n      setUser(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authService.login(email, password);\r\n      \r\n      const { access_token } = response;\r\n      setToken(access_token);\r\n      localStorage.setItem('ecg_token', access_token);\r\n      \r\n      // Get user info\r\n      const userData = await authService.getCurrentUser(access_token);\r\n      setUser(userData);\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, fullName?: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authService.register(email, password, fullName);\r\n      setUser(response);\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('ecg_token');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    login,\r\n    register,\r\n    logout,\r\n    isLoading,\r\n    isAuthenticated,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}